// archivos
	input	ALQUILERES
				alq-patente
				alq-fecha
				alq-tipo-doc
				alq-nro-doc
				alq-importe
				alq-nro-legajo-chofer
				alq-estado (PRESENTADO, RECHAZADO, TERMINADO)
	input	CHOFERES
				cho-nro-legajo
				cho-fecha-desde
				cho-fecha-hasta
				cho-turno
	input	CLIENTES
				cli-numero
				cli-fec-alta
				cli-telefono
				cli-direccion
				cli-nro-doc
	output	RECHAZOS
				rech-patente
				rech-fecha
				rech-tipo-doc
				rech-nro-doc
				rech-importe
	output	LISTADO
				alq-fecha
				alq-nro-legajo-chofer
				cho-turno
				datos-cliente
					cli-numero
					cli-tipo-doc
					cli-nro-doc
					cli-direccion

// procedimiento principal
while (! eof ALQUILERES):
	read REG-ALQUILERES
	if (estado == PRESENTADO):
		if (chofer_en_actividad):
			estado = TERMINADO
			rewrite REG-ALQUILERES
		else:
			write REG-ALQUILERES in RECHAZOS
	if (estado == TERMINADO):
		escribir_en_listado


// en un programa aparte
// dada una fecha, buscar si existe un registro en el // archivo de Choferes en donde la fecha de alquiler
// est√© comprendida entre las fechas desde y hasta
// (i.e. recorrer secuencialmente el archivo desde MIN // CHO-FECHA-DESDE hasta REG-ALQUILERES.FECHA)
bool chofer_en_actividad (REG-ALQUILERES.FECHA):


// ????
void escribir_en_listado




// en un programa aparte
// buscamos los datos del cliente por clave secundaria
// (asumimos que no tiene duplicados)
datos_cliente buscar_cliente (cli-nro-doc):
	
	